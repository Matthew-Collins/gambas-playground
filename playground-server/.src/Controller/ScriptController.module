' Gambas module file

Const TIMEOUT As Integer = 5000
Const STDOUT_LIMIT As Integer = 4096

Private $runner As Process
Private $timeout As New Timer As "Timeout"
Private $sContainerId As String
Private $iStdoutLen As Integer

Private Stream as New Stream

Public Sub RunScript(Optional Code As String = "", ShowCodeDefault as Boolean= False) 

  If Code = "" Then
    Code = Trim(RequestUtils.Body)
  Endif

  If RequestUtils.IsParameter("ShowCode", ShowCodeDefault) Then
    Stream.WriteLine("Code:" & gb.NewLine)
    Stream.WriteLine(Code)
    Stream.Send
  End if
  
  Stream.WriteLine("Result:")
  If Not stdin Then
    Stream.Send
    Return
  Endif

  Shell "docker create --cap-drop=ALL --cpus=1 --memory=16m --net=none --pids-limit=20 --security-opt=no-new-privileges --interactive gbs3" To $sContainerId
  $sContainerId = Trim($sContainerId)
  
  Print "Container: " & sContainerId

  If Not Exist(User.home &/ "scripts") Then Mkdir User.home &/ "scripts"
  File.Save(User.home &/ "scripts" &/ $sContainerId & ".gbs", Code)
  Shell "docker cp " &/ User.home &/ "scripts" &/ $sContainerId & ".gbs " & $sContainerId & ":script.gbs" Wait
  Try Kill User.home &/ "scripts" &/ $sContainerId & ".gbs"

  $runner = Shell "docker start --attach --interactive " & $sContainerId For Read As "Runner"

  $timeout.Delay = TIMEOUT
  $timeout.Start

End

Public Sub Main()

  RunScript()

End

Public Sub Runner_Read()

  Dim len As Integer = Lof($runner)

  If len + $iStdoutLen > STDOUT_LIMIT Then
    Print Read #$runner, - STDOUT_LIMIT - $iStdoutLen
    Print "-----8<----- Output has been truncated ("; STDOUT_LIMIT; " bytes max) -----8<-----"
    $runner.Close
    $runner.Kill
  Else
    Print Read #$runner, len;
    $iStdoutLen += len
  Endif

End

Public Sub Runner_Error(stderr As String)

  Stream.Write(Print stderr)

End

Public Sub Runner_Kill()

  Stream.Send
  $timeout.Stop
  Exec ["docker", "rm", "--force", $sContainerId] For Read

End

Public Sub Timeout_Timer()

  Stream.WriteLine("\nProcess timed out !")
  Exec ["docker", "kill", $sContainerId] For Read
  $runner.Kill

End


